# .github/workflows/ci.yml
name: Python CI (uv + Ruff)

on:
  # 每次 push 到 main 或 pull request 時觸發
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # 測試最新的 Python 版本
        python-version: ["3.12"]

    # 🌟 關鍵新增：使用 Service Container
    services:
      mongodb: # 服務名稱，您在代碼中將使用這個名稱作為主機名
        image: mongo:latest # 使用官方的 MongoDB 映像檔
        ports:
          - 27017:27017 # 將容器的 27017 埠映射出來
        options: >
          --name mongodb_ci # 給容器一個名稱

    steps:
    - name: ⬇️ 檢查程式碼
      uses: actions/checkout@v4

    - name: 🐍 設置 Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    # --- 關鍵步驟：使用 UV 進行安裝與同步 ---
    - name: ⚙️ 安裝 UV (Rust-based Package Manager)
      run: pip install uv

    - name: 🔒 檢查 UV 鎖定檔是否是最新的 (Check Lockfile Freshness)
      # uv lock --check 會確保 pyproject.toml 的變動已經同步到 uv.lock
      run: uv lock --check

    - name: 🌐 建立虛擬環境 (Virtual Environment)
      # uv venv 會在專案根目錄創建一個 .venv 資料夾
      run: uv venv

    - name: 📦 同步虛擬環境並安裝依賴 (修正為 uv pip install)
       # 使用 'uv pip install .' 來安裝專案本身的主依賴 (從 pyproject.toml 的 [project])
       # 使用 '--with test' 來額外安裝 'test' 依賴組 (從 [project.optional-dependencies] 或 [tool.uv.dev-dependencies])
      run: uv pip install --group dev .

    - name: 🧹 運行 Ruff Linter (Linting)
      # 使用 uv run 確保 Ruff 在正確的環境內執行
      run: uv run ruff check .

    - name: 💅 運行 Ruff Formatter (格式檢查)
      # 確保所有程式碼都已格式化 (僅檢查，不修改)
      run: uv run ruff format . --check

   # --- 核心測試步驟 ---

    # 1. 🧪 運行單元測試 (Unit Tests - UT)
    # 目的：運行所有不包含 'integration' 標記的測試。
    # 特點：不需要外部網路連線，速度最快，是每次 PR 的主要防線。
    - name: 🚀 運行單元/API 模擬測試 (UT)
      # UT 只需要模擬的 MONGO_URI，不需要真實的 AI 金鑰
      env:
        GEMINI_API_KEY: "dummy_gemini_api_key"
        CWA_API_KEY: "dummy_cwa_api_key"
        MONGO_URI: "mongodb://localhost:27017"
      # -m "not integration" 確保只運行不需要真實連線的 Mocked 測試
      run: uv run pytest tests/ -m "not integration"

    # 2. 🌍 運行整合測試 (Integration Tests) - 獨立步驟
    # 目的：檢查與真實 Gemini/CWA API 的連線和回應格式。
    # 特點：需要真實的金鑰和網路連線。
    - name: 🌐 運行真實整合測試 (Integration Tests)
      # ⚠️ 僅在 main 分支 push 時執行 或 手動啟用時才執行，以節省 API 費用
      if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }} # 必須使用真實金鑰
        CWA_API_KEY: ${{ secrets.CWA_API_KEY }}       # 必須使用真實金鑰
        MONGO_URI: "mongodb://mongodb:27017" # MongoDB 服務在 CI 環境中運行
      # -m "integration" 確保只運行帶有整合標記的測試
      run: uv run pytest tests/ -m "integration"
